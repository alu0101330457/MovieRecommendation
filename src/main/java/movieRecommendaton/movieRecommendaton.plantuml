@startuml

title __MOVIERECOMMENDATON's Class Diagram__\n


    namespace movieRecommendaton {
      class movieRecommendaton.AllFilters {
          ~ filters : ArrayList<Filter>
          + AllFilters()
          + addFilter()
          + satisfies()
      }

  }
  


    namespace movieRecommendaton {
      class movieRecommendaton.DirectorsFilter {
          - myDirectors : String
          + DirectorsFilter()
          + satisfies()
      }
    }

  


    namespace movieRecommendaton {
      class movieRecommendaton.EfficientRater {
          - myID : String
          - myRatings : HashMap<String, Rating>
          + EfficientRater()
          + addRating()
          + getID()
          + getItemsRated()
          + getRating()
          + hasRating()
          + numRatings()
      }
    }

  


    namespace movieRecommendaton {
      interface movieRecommendaton.Filter {
          {abstract} + satisfies()
      }
    }

  


    namespace movieRecommendaton {
      class movieRecommendaton.FirstRatings {
          + countRatedMovies()
          + findMaxNumOfRatingsByRater()
          + findNumOfRater()
          + findRatingsOfMovie()
          + loadMovies()
          + loadRaters()
          + test()
          + testLoadMovies()
          + testLoadRaters()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.FourthRatings {
          + FourthRatings()
          + FourthRatings()
          + getAverageRatings()
          + getAverageRatingsByFilter()
          + getRaterSize()
          + getSimilarRatings()
          - dotProduct()
          - getAverageByID()
          - getSimilarities()
      }
    }

  


    namespace movieRecommendaton {
      class movieRecommendaton.GenreFilter {
          - myGenre : String
          + GenreFilter()
          + satisfies()
      }
    }

  


    namespace movieRecommendaton {
      class movieRecommendaton.MinutesFilter {
          - myMax : int
          - myMin : int
          + MinutesFilter()
          + satisfies()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.Movie {
          - country : String
          - director : String
          - genres : String
          - id : String
          - minutes : int
          - poster : String
          - title : String
          - year : int
          + Movie()
          + Movie()
          + getCountry()
          + getDirector()
          + getGenres()
          + getID()
          + getMinutes()
          + getPoster()
          + getTitle()
          + getYear()
          + toString()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.MovieDatabase {
          {static} - ourMovies : HashMap<String, Movie>
          {static} + containsID()
          {static} + filterBy()
          {static} + getCountry()
          {static} + getDirector()
          {static} + getGenres()
          {static} + getMinutes()
          {static} + getMovie()
          {static} + getPoster()
          {static} + getTitle()
          {static} + getYear()
          {static} + initialize()
          {static} + size()
          {static} - initialize()
          {static} - loadMovies()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.MovieRunnerAverage {
          - movieFileName : String
          - ratingFileName : String
          + MovieRunnerAverage()
          + getAverageRatingOneMovie()
          + printAverageRatings()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.MovieRunnerSimilarRatings {
          + MovieRunnerSimilarRatings()
          + printAverageRatings()
          + printSimilarRatings()
          + printSimilarRatingsByDirector()
          + printSimilarRatingsByGenre()
          + printSimilarRatingsByGenreAndMinutes()
          + printSimilarRatingsByYearAfterAndMinutes()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.MovieRunnerWithFilters {
          - ratingFileName : String
          + MovieRunnerWithFilters()
          + printAverageRatings()
          + printAverageRatingsByDirectors()
          + printAverageRatingsByDirectorsAndMinutes()
          + printAverageRatingsByGenre()
          + printAverageRatingsByMinutes()
          + printAverageRatingsByYearAfter()
          + printAverageRatingsByYearAfterAndGenre()
      }
    }

  

    namespace movieRecommendaton {
      class movieRecommendaton.PlainRater {
          - myID : String
          - myRatings : ArrayList<Rating>
          + PlainRater()
          + addRating()
          + getID()
          + getItemsRated()
          + getRating()
          + hasRating()
          + numRatings()
      }

  }
  


    namespace movieRecommendaton {
      interface movieRecommendaton.Rater {
          {abstract} + addRating()
          {abstract} + getID()
          {abstract} + getItemsRated()
          {abstract} + getRating()
          {abstract} + hasRating()
          {abstract} + numRatings()
      }

  }
  


    namespace movieRecommendaton {
      class movieRecommendaton.RaterDatabase {
          {static} - ourRaters : HashMap<String, Rater>
          {static} + addRaterRating()
          {static} + addRatings()
          {static} + getRater()
          {static} + getRaters()
          {static} + initialize()
          {static} + size()
          {static} - initialize()
      }
    }


    namespace movieRecommendaton {
      class movieRecommendaton.Rating {
          - item : String
          - value : double
          + Rating()
          + compareTo()
          + getItem()
          + getValue()
          + toString()
      }

  }
  

    namespace movieRecommendaton {
      class movieRecommendaton.RecommendationRunner {
          - maxRecNum : int
          - minimalRaters : int
          - myRandom : Random
          - numSimilarRaters : int
          - toRateNum : int
          + RecommendationRunner()
          + getItemsToRate()
          + printRecommendationsFor()
          - printOut()
      }

  }
  

    namespace movieRecommendaton {
      interface movieRecommendaton.Recommender {
          {abstract} + getItemsToRate()
          {abstract} + printRecommendationsFor()

    }
  }
  

    namespace movieRecommendaton {
      class movieRecommendaton.SecondRatings {
          - myMovies : ArrayList<Movie>
          - myRaters : ArrayList<Rater>
          + SecondRatings()
          + SecondRatings()
          + getAverageRatings()
          + getID()
          + getMovieSize()
          + getRaterSize()
          + getTitle()
          - getAverageByID()
      }

  }
  

    namespace movieRecommendaton {
      class movieRecommendaton.ThirdRatings {
          - myRaters : ArrayList<Rater>
          + ThirdRatings()
          + ThirdRatings()
          + getAverageRatings()
          + getAverageRatingsByFilter()
          + getRaterSize()
          - getAverageByID()
      }

  }
  


    namespace movieRecommendaton {
      class movieRecommendaton.TrueFilter {
          + satisfies()

    }
  }
  

    namespace movieRecommendaton {
      class movieRecommendaton.YearAfterFilter {
          - myYear : int
          + YearAfterFilter()
          + satisfies()
      }

  }
  

  movieRecommendaton.AllFilters .up.|> movieRecommendaton.Filter
  movieRecommendaton.DirectorsFilter .up.|> movieRecommendaton.Filter
  movieRecommendaton.EfficientRater .up.|> movieRecommendaton.Rater
  movieRecommendaton.GenreFilter .up.|> movieRecommendaton.Filter
  movieRecommendaton.MinutesFilter .up.|> movieRecommendaton.Filter
  movieRecommendaton.MovieRunnerAverage o-- movieRecommendaton.SecondRatings : sr
  movieRecommendaton.MovieRunnerSimilarRatings o-- movieRecommendaton.FourthRatings : fourth
  movieRecommendaton.MovieRunnerWithFilters o-- movieRecommendaton.ThirdRatings : tr
  movieRecommendaton.PlainRater .up.|> movieRecommendaton.Rater
  movieRecommendaton.Rating .up.|> Comparable
  movieRecommendaton.RecommendationRunner .up.|> movieRecommendaton.Recommender
  movieRecommendaton.TrueFilter .up.|> movieRecommendaton.Filter
  movieRecommendaton.YearAfterFilter .up.|> movieRecommendaton.Filter


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
