<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="53" tokens="207">
      <file begintoken="6202" column="56" endcolumn="5" endline="86" endtoken="6408"
            line="34"
            path="/Users/mariomojica/Documents/GitHub/MovieRecommendation/src/main/java/movieRecommendaton/FourthRatings.java"/>
      <file begintoken="11749" column="39" endcolumn="5" endline="82" endtoken="11955"
            line="30"
            path="/Users/mariomojica/Documents/GitHub/MovieRecommendation/src/main/java/movieRecommendaton/ThirdRatings.java"/>
      <codefragment><![CDATA[        for (Rater currRater: RaterDatabase.getRaters()){
            ArrayList<String> currMovies = currRater.getItemsRated();
            for (String s: currMovies){
                if (s.equals(movieID)){
                    numRatings += 1;
                    totalScore += currRater.getRating(movieID);
                }
            }
        }
        
        if (numRatings < minimalRaters){
            return 0.0;
        } else {
            return totalScore/numRatings;
        }
    }
    
    public ArrayList<Rating> getAverageRatings(int minimalRaters){
        /*
         * This method should find the average rating for every movie that has been rated by at least
         * minimalRaters raters. Store each such rating in a Rating object in which the movie ID 
         * and the average rating are used in creating the Rating object. 
         * The method getAverageRatings should return an ArrayList of all the Rating objects for movies
         * that have at least the minimal number of raters supplying a rating. 
         * For example, if minimalRaters has the value 10, then this method returns rating information
         * (the movie ID and its average rating) for each movie that has at least 10 ratings. 
         * You should consider calling the private getAverageByID method.
         */
        // Get the ArrayList of Movies from MovieDatabase.
        ArrayList<String> movies = MovieDatabase.filterBy(new TrueFilter());
        ArrayList<Rating> allAverageRatings = new ArrayList<Rating>();
        for (String currMovieID: movies){
            double averageRating = getAverageByID(currMovieID, minimalRaters);
            allAverageRatings.add(new Rating(currMovieID, averageRating));
        }
        return allAverageRatings;
    }
    
    public ArrayList<Rating> getAverageRatingsByFilter(int minimalRaters, Filter filterCriteria){
        /*
         * This method should create and return an ArrayList of type Rating of all the movies 
         * that have at least minimalRaters ratings and satisfies the filter criteria. 
         * This method will need to create the ArrayList of type String of movie IDs 
         * from the MovieDatabase using the filterBy method before calculating those averages.
         */
        ArrayList<String> movieIDs = MovieDatabase.filterBy(filterCriteria);
        ArrayList<Rating> averageRatings = new ArrayList<Rating>();
        for (String s: movieIDs){
            double ratingValue = getAverageByID(s, minimalRaters);
            averageRatings.add(new Rating(s, ratingValue));
        }
        return averageRatings;
    }]]></codefragment>
   </duplication>
   <duplication lines="43" tokens="116">
      <file begintoken="11416" column="30" endcolumn="18" endline="80" endtoken="11531"
            line="38"
            path="/Users/mariomojica/Documents/GitHub/MovieRecommendation/src/main/java/movieRecommendaton/SecondRatings.java"/>
      <file begintoken="11709" column="54" endcolumn="18" endline="59" endtoken="11824"
            line="16"
            path="/Users/mariomojica/Documents/GitHub/MovieRecommendation/src/main/java/movieRecommendaton/ThirdRatings.java"/>
      <codefragment><![CDATA[        return myMovies.size();
    }
    
    public int getRaterSize(){
        // return the number of raters.
        return myRaters.size();
    }
    
    private double getAverageByID(String movieID, int minimalRaters){
        /* This method returns a double representing the average movie rating for this ID 
         * if there are at least minimalRaters ratings. 
           If there are not minimalRaters ratings, then it returns 0.0.*/
        int numRatings = 0;
        double totalScore = 0;
        for (Rater currRater: myRaters){
            ArrayList<String> currMovies = currRater.getItemsRated();
            for (String s: currMovies){
                if (s.equals(movieID)){
                    numRatings += 1;
                    totalScore += currRater.getRating(movieID);
                }
            }
        }
        
        if (numRatings < minimalRaters){
            return 0.0;
        } else {
            return totalScore/numRatings;
        }
    }
    
    public ArrayList<Rating> getAverageRatings(int minimalRaters){
        /*
         * This method should find the average rating for every movie that has been rated by at least
         * minimalRaters raters. Store each such rating in a Rating object in which the movie ID 
         * and the average rating are used in creating the Rating object. 
         * The method getAverageRatings should return an ArrayList of all the Rating objects for movies
         * that have at least the minimal number of raters supplying a rating. 
         * For example, if minimalRaters has the value 10, then this method returns rating information
         * (the movie ID and its average rating) for each movie that has at least 10 ratings. 
         * You should consider calling the private getAverageByID method.
         */
        ArrayList<Rating> allAverageRatings = new ArrayList<Rating>();]]></codefragment>
   </duplication>
   <duplication lines="82" tokens="106">
      <file begintoken="183" column="30" endcolumn="40" endline="241" endtoken="288"
            line="160"
            path="/Users/mariomojica/Documents/GitHub/MovieRecommendation/src/main/java/edu/duke/FileResource.java"/>
      <file begintoken="4174" column="103" endcolumn="40" endline="151" endtoken="4279"
            line="72"
            path="/Users/mariomojica/Documents/GitHub/MovieRecommendation/src/main/java/edu/duke/URLResource.java"/>
      <codefragment><![CDATA[            initRead(filename);
        }
    }

    /**
     * Allow access to this opened file one line at a time.
     * 
     * @return an <code>Iterable</code> that will allow access to contents of opened file one line
     *         at a time.
     */
    public Iterable<String> lines () {
        return new TextIterable(mySource, "\\n");
    }

    /**
     * Allow access to this opened file one word at a time, where words are separated by
     * white-space. This means any form of spaces, like tabs or newlines, can delimit words.
     * 
     * @return an <code>Iterable</code> that will allow access to contents of opened file one word
     *         at a time.
     */
    public Iterable<String> words () {
        return new TextIterable(mySource, "\\s+");
    }

    /**
     * Return entire contents of this opened file as one string.
     * 
     * @return a <code>String</code> that is the contents of the open file
     */
    public String asString () {
        return mySource;
    }

    /**
     * Returns a <code>CSVParser</code> object to access the contents of an open file.
     * 
     * Each line of the file should be formatted as data separated by commas and with a header row
     * to describe the column names.
     * 
     * @return a <code>CSVParser</code> that can provide access to the records in the file one at a
     *         time
     * @throws exception if this file does not represent a CSV formatted data
     */
    public CSVParser getCSVParser () {
        return getCSVParser(true);
    }

    /**
     * Returns a <code>CSVParser</code> object to access the contents of an open file, possibly
     * without a header row.
     * 
     * Each line of the file should be formatted as data separated by commas and with/without a
     * header row to describe the column names.
     * 
     * @param withHeader uses first row of data as a header row only if true
     * @return a <code>CSVParser</code> that can provide access to the records in the file one at a
     *         time
     * @throws exception if this file does not represent a CSV formatted data
     */
    public CSVParser getCSVParser (boolean withHeader) {
        return getCSVParser(withHeader, ",");
    }

    /**
     * Returns a <code>CSVParser</code> object to access the contents of an open file, possibly
     * without a header row and a different data delimiter than a comma.
     * 
     * Each line of the file should be formatted as data separated by the delimiter passed as a
     * parameter and with/without a header row to describe the column names. This is useful if the
     * data is separated by some character other than a comma.
     * 
     * @param withHeader uses first row of data as a header row only if true
     * @param delimiter a single character that separates one field of data from another
     * @return a <code>CSVParser</code> that can provide access to the records in the file one at a
     *         time
     * @throws exception if this file does not represent a CSV formatted data
     * @throws exception if <code>delimiter.length() != 1</code>
     */
    public CSVParser getCSVParser (boolean withHeader, String delimiter) {
        if (delimiter == null || delimiter.length() != 1) {
            throw new ResourceException("FileResource: CSV delimiter must be a single character: " + delimiter);]]></codefragment>
   </duplication>
</pmd-cpd>